@page "/productos/detalle/{id}"
@attribute [Authorize (Policy = "ProductRead")]
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@layout MainLayout
@inject ProductService _productService
@inject LotService _lotService
@inject NavigationManager _navigationManager
@inject SharedData _data
@inject ISnackbar Snackbar

<MudPaper Class="ma-3">
    <MudAppBar Elevation="0" Fixed="false" Style="border-radius: 15px;">

        <MudSpacer />

        <AuthorizeView Policy="ProductWrite">
            <Authorized>
                <MudButton Class="rounded-pill" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Large"
                           Color="Color.Primary" OnClick="EditProduct">
                    Editar Producto
                </MudButton>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Policy="ProductDelete">
            <Authorized>
                <MudButton Class="rounded-pill" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Large"
                           Color="Color.Error" OnClick="OpenDeleteDialog">
                    Eliminar Producto
                </MudButton>
            </Authorized>

        </AuthorizeView>

        <MudDivider DividerType="DividerType.Middle"></MudDivider>

        
    </MudAppBar>
    <MudGrid Class="pa-5">
        <MudItem xs="3">
            <MudImage Src="@product.imageUrl" Elevation="3" 
                Height="220"/>
        </MudItem>

        <MudItem xs="9">

            <MudText Typo="Typo.h3">@product.name</MudText>
            <MudText Typo="Typo.h4">@product.category?.name - @product.subcategory?.name</MudText>
                
            @if (product.tags?.Count > 0)
            {
                @foreach (var tag in product.tags)
                {
                    <MudChip Color="Color.Primary" Size="Size.Medium">@tag.name</MudChip>
                }
            }
            else
            {
                <MudChip Color="Color.Error" Size="Size.Medium">Sin etiquetas</MudChip>
            }
            <MudText Typo="Typo.body1">@product.description</MudText>
        </MudItem>

        <AuthorizeView Policy="InventoryWrite">
            <Authorized>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Inline="true">Lotes: @product.lotCount</MudText>
                    <MudButton Class="rounded-pill mx-3" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Large"
                               Color="Color.Primary" OnClick="AddLot">
                        Agregar Lote
                    </MudButton>
                </MudItem>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Policy="InventoryRead">
            <Authorized>
                @foreach (var lot in lot_list)
                {
                    <MudItem xs="3">
                        <MudCard Style="background-color: #F5F5F5">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6" Inline="true">Proveedor:</MudText>
                                    <MudText Typo="Typo.h6" Color="Color.Info" Inline="true">@lot.provider?.name</MudText>
                                    <MudText Typo="Typo.body1"><b>Composicion:</b> @lot.composition?.Composition()</MudText>
                                    <MudText Typo="Typo.body1"><b>Stock:</b> @lot.stock</MudText>
                                    <MudText Typo="Typo.body1"><b>Venta:</b> @lot.sellingPrice C$</MudText>
                                    <MudText Typo="Typo.body1"><b>Compra:</b> @lot.purchasePrice C$</MudText>

                                    <MudText Typo="Typo.body1"> <b>Fecha Vencimiento:</b> </MudText>
                                    <MudText Typo="Typo.body1" Color="Color.Success">
                                        <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" /> @lot.expirationDate.ToString("dd/MM/yyyy")
                                    </MudText>
                                    @if (lot.consign)
                                    {
                                        <MudChip Icon="@Icons.Material.Filled.VerifiedUser" Color="Color.Dark">En consigna</MudChip>
                                    }
                                </CardHeaderContent>
                            </MudCardHeader>
                        </MudCard>
                    </MudItem>
                }
            </Authorized>
        </AuthorizeView>

        

    </MudGrid>

</MudPaper>

<MudDialog @bind-IsVisible="delete_visible">
    <TitleContent>
        <MudText Typo="Typo.h4">
            Desea eliminar @product.name?
        </MudText>
        <MudText Typo="Typo.body1">
            Estas completamente seguro, tambien eliminaras los registros que dependen de esta información.
        </MudText>
    </TitleContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CloseDeleteDialog" Class="px-10">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteSubmit" Class="px-10">Eliminar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public string Id { get; set; }

    private List<LotDTO> lot_list = new List<LotDTO>();
    private ProductDTO product = new ProductDTO();

    private bool delete_visible;
    private void OpenDeleteDialog() => delete_visible = true;
    private void CloseDeleteDialog() => delete_visible = false;

    private async Task DeleteSubmit()
    {
        var response = await _productService.DeleteProduct(int.Parse(Id));
        delete_visible = false;

        if (response)
        {
            Snackbar.Add("Producto eliminado", Severity.Info);
            _navigationManager.NavigateTo("/productos/");
        }
        else Snackbar.Add("No se pudo eliminar el producto", Severity.Warning);
    }

    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Productos", href: "/productos"),
            new BreadcrumbItem("Detalle producto", href: null, disabled: true)
        };

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        await GetLots();

        product = await _productService.SearchProduct(Id);
        _data.LastProduct = product;
    }

    private async Task GetLots()
    {
        var result = await _lotService.LotList(Id);
        lot_list = result!;

    }

    private void AddLot() => _navigationManager.NavigateTo("/productos/lote/agregar/" + Id);

    private void EditProduct() => _navigationManager.NavigateTo("/productos/editar/" + Id);
    
}
