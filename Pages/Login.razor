@page "/"
@using Pharmatic.Services;
@inject NavigationManager _navigationManager
@inject AuthService _authService
@layout LoginLayout
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider _authState
@inject UserService _userService
@inject SharedData _data

<MudPaper Class="px-4" Elevation="0" Square="true" Style="height:100%; display: flex; flex-direction: column; justify-content: center; width:100%">
    <EditForm Model="@loginUser" OnValidSubmit="OnValidSubmit" style="">
        <MudImage Width="246" Height="78" Src="/img/PharmaticLogo.png" />

        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div style="width:75%; margin:auto;">
            <MudText Typo="Typo.h4" GutterBottom="true" Align="Align.Left">Login</MudText>

            <MudTextField T="string"
            @bind-Value="@loginUser.username"
                          Placeholder="Correo"
                          Variant="Variant.Outlined"
                          Class="my-2"
                          For="@(() => loginUser.username)"
                          Margin="Margin.Dense"
                          Style="">
            </MudTextField>

            <MudTextField @bind-Value="@loginUser.password"
                          Variant="Variant.Outlined"
                          Class="my-2"
                          InputType="@PasswordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordInputIcon"
                          OnAdornmentClick="TogglePasswordVisibility"
                          For="@(() => loginUser.password)"
                          Margin="Margin.Dense"
                          FullWidth="false" Placeholder="Contraseña"
                          Style="">
            </MudTextField>

            <div style="display: flex; justify-content: flex-end;">
                <MudCheckBox @bind-Checked="@checkvalue" Color="@Color.Primary" Label="Mantener Sesión" LabelPosition="LabelPosition.Start" Size="Size.Medium"/>
            </div>
        </div>
        
        
        <center>
            <MudButton Class="mt-1 btn rounded-pill" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Medium"
                       Disabled="@disableButton" Color="Color.Primary" Style="text-transform:none">
                Iniciar Sesión
            </MudButton>
        </center>

        <center>
            <MudButton Variant="Variant.Text" Color="Color.Primary" Class="mt-1" Size="Size.Medium" Style="text-transform:none">
                ¿Tienes problemas?
            </MudButton>
        </center>

    </EditForm>

</MudPaper>

@code {
    LoginRequest loginUser = new LoginRequest();
    bool disableButton { get; set; } = false;
    public bool? checkvalue { get; set; } = false;


    bool loading = false;

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    async Task SaveUserData()
    {
        var result = await _userService.CurrentUser();
        _data.User = result!;
    }

    private async Task OnValidSubmit()
    {
        disableButton = true;

        var loginRequest = new LoginRequest
            {
                username = loginUser.username,
                password = loginUser.password
            };

        loading = true;

        var jwt = await _authService.LoginAsync(loginRequest);

        loading = false;
        if (jwt != null)
        {
            await LocalStorage.SetItemAsync("token", jwt);
            await _authState.GetAuthenticationStateAsync();
            await SaveUserData();
            Snackbar.Add($"Bienvenido {loginRequest.username}!", Severity.Success);
            _navigationManager.NavigateTo("/dashboard");
        }
        else
        {
            Snackbar.Add("No se encontraron coincidencias", Severity.Error);
            disableButton = false;
        }
    }
}
