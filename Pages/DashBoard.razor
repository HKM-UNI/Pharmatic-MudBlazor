@page "/dashboard"
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@using System.Globalization;
@layout MainLayout
@inject SharedData _data
@inject SalesService _salesService

<MudGrid Class="px-2 pt-1" Style="height:100%; overflow-y:auto; overflow-x: hidden;">
    <MudItem md="6" sm="12">
        <MudPaper Class="mb-5">

			<MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="300px" ChartOptions="options">
				<CustomGraphics>
					<style>
                        .mud-chart-bar {
                            stroke-width: 20px;
                        }
					</style>
				</CustomGraphics>

			</MudChart>

        </MudPaper>

    </MudItem>

</MudGrid>

@code {
    private List<SalesInvoiceDTO> sales_list = new List<SalesInvoiceDTO>();

    ChartOptions options = new ChartOptions()
        {
            LineStrokeWidth = 8,
        };

    public List<ChartSeries> Series = new List<ChartSeries>();

    public string[] XAxisLabels = Enumerable.Range(0, 8)
            .Select(i => DateTime.Now.AddMonths(-i).ToString("MMM", CultureInfo.InvariantCulture))
            .Reverse()
            .ToArray();

    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home, disabled:true),
        };

        await GetSales();
        UpdateChart();
    }

    private async Task GetSales()
    {
        var result = await _salesService.SalesList();
        sales_list = result!;
    }

    private void UpdateChart()
    {
        // Obtiene los últimos 8 meses
        var last8Months = Enumerable.Range(0, 8)
            .Select(i => DateTime.Now.AddMonths(-i).Month)
            .ToList();

        // Filtra las ventas de los últimos 8 meses
        var MonthsSales = last8Months
            .GroupJoin(
                sales_list,
                month => month,
                sale => sale.salesDate.Month,
                (month, sales) => new
                {
                    Month = month,
                    TotalSales = sales.Sum(s => s.total)
                }
            )
            .OrderBy(data => data.Month)
            .ToList();

        // Rellena con ceros para los meses sin ventas
        foreach (var month in last8Months.Except(MonthsSales.Select(data => data.Month)))
        {
            MonthsSales.Add(new
            {
                Month = month,
                TotalSales = 0.0
            });
        }

        // Actualiza las series del gráfico
        Series = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Ventas",
                Data = MonthsSales.OrderBy(data => data.Month).Select(data => data.TotalSales).ToArray()
            }
        };
    }

    
}