@page "/proveedores/agregar"
@page "/proveedores/editar/{id}"
@attribute [Authorize(Policy = "ProviderWrite")]
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@layout MainLayout
@inject NavigationManager _navigationManager
@inject SharedData _data
@inject ProviderService _providerService
@inject ISnackbar Snackbar

<MudPaper Class="mx-2" Style="height:100%; overflow-y:auto; overflow-x: hidden; background-color:white;">
    <MudAppBar Elevation="0" Fixed="false" Style="border-radius:24px; position: sticky; top: 0;" Class="pa-0 ma-0" Dense="true">

        <MudText Typo="Typo.h6" Align="Align.Left" Color="Color.Dark" Margin="Margin.Dense">Formulario proveedor</MudText>

        <MudSpacer />

        <MudButton Class="rounded-pill mx-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Medium"
                   Color="Color.Error" OnClick="OnCancelClicked" Style="text-transform:none">
            Cancelar
        </MudButton>

        <MudButton Class="rounded-pill mx-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Medium"
                   Color="Color.Primary" OnClick="OnSubmitClicked" Style="text-transform:none">
            @SubmitButtonLabel
        </MudButton>
    </MudAppBar>

    <MudGrid Justify="Justify.Center" Class="pa-5">
        <MudItem xs="10">
            <MudTextField @bind-Value="txtName" Label="Nombre" Variant="Variant.Outlined" Class="my-3" Margin="Margin.Dense"></MudTextField>
            <MudTextField @bind-Value="txtEmail" Label="Email" Variant="Variant.Outlined" Class="my-3" Margin="Margin.Dense"></MudTextField>
            <MudTextField @bind-Value="txtAddress" Label="Dirección" Variant="Variant.Outlined" Class="my-3" Margin="Margin.Dense" Lines="3"></MudTextField>
            <MudTextField T="int" @bind-Value="txtPhone" Label="Teléfono" Variant="Variant.Outlined" Class="my-3" Margin="Margin.Dense"></MudTextField>
        </MudItem>
    </MudGrid>

</MudPaper>
@code {
    private string txtName = string.Empty;
    private string txtEmail = string.Empty;
    private string txtAddress = string.Empty;
    private int txtPhone;

    [Parameter]
    public string Id { get; set; }
    bool IsEditMode => !string.IsNullOrEmpty(Id);
    string FormTitle => IsEditMode ? "Editar proveedor" : "Agregar proveedor";
    string SubmitButtonLabel => IsEditMode ? "Actualizar" : "Guardar";

    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Proveedores", href: "/proveedores"),
            new BreadcrumbItem(FormTitle, href: null, disabled: true)
        };

        if (IsEditMode)
        {
            ProviderDTO provider_data = new ProviderDTO();

            var result = await _providerService.SearchProvider(Id);
            provider_data = result!;

            txtName = provider_data.name ?? string.Empty;
            txtEmail = provider_data.email ?? string.Empty;
            txtAddress = provider_data.address ?? string.Empty;
            txtPhone = provider_data.phone ?? 0;
        }

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    private async Task<ProviderDTO> AddProvider()
    {
        ProviderDTO new_provider = new ProviderDTO();

        new_provider.name = txtName;
        new_provider.email = txtEmail;
        new_provider.phone = txtPhone;
        new_provider.address = txtAddress;

        var result = await _providerService.CreateProvider(new_provider);
        return result;
    }

    private async Task<ProviderDTO> EditProvider()
    {
        ProviderDTO updated_provider = new ProviderDTO();

        updated_provider.name = txtName;
        updated_provider.email = txtEmail;
        updated_provider.phone = txtPhone;
        updated_provider.address = txtAddress;

        var result = await _providerService.EditProvider(int.Parse(Id), updated_provider);
        return result;
    }

    private void OnCancelClicked() => _navigationManager.NavigateTo("/proveedores/");

    private async Task OnSubmitClicked()
    {
        if (!IsEditMode)
        {
            var provider = await AddProvider();

            if (provider != null)
            {
                Snackbar.Add("Proveedor agregado correctamente", Severity.Success);
                _navigationManager.NavigateTo("/proveedores");
            }
            else Snackbar.Add("Error al agregar proveedor", Severity.Error);
        }
        else
        {
            var provider = await EditProvider();

            if (provider != null)
            {
                Snackbar.Add("Proveedor actualizado correctamente", Severity.Success);
                _navigationManager.NavigateTo($"/proveedores");
            }
            else Snackbar.Add("Error al actualizar proveedor", Severity.Error);
        }

    }
}
