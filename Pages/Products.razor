@page "/productos"
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@layout MainLayout
@inject ProductService _productService
@inject NavigationManager _navigationManager
@inject SharedData _data

<MudPaper Class="mx-2" Style="height:100%; overflow-y:auto; overflow-x: hidden; background-color:white;">
    <MudAppBar Elevation="0" Fixed="false" Style="border-radius: 15px; position: sticky; top: 0;" Dense="true">
        <MudTextField @bind-Value="@search_text" Placeholder="Buscar" Variant="Variant.Outlined" Adornment="Adornment.Start"
                      AdornmentIcon="@CustomIcons.Search" Margin="Margin.Dense" />

        <MudSpacer />

        <MudButton Class="rounded-pill" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Medium"
                   Color="Color.Primary" OnClick="AgregarClicked" Style="text-transform:none">
            Agregar
        </MudButton>
    </MudAppBar>
    <MudGrid Class="pa-5" Spacing="4">
        @foreach (var prod in product_list)
        {
            <MudItem xl="4" lg="6" sm="6" xs="12">
                <a href="/productos/detalle/@prod.productNo">
                    <MudGrid Style="outline: 1px solid #E6E6E6; border-radius:24px;" Class="hover-card">
                    

                        <MudItem xs="4">
                            <MudImage Src="@prod.imageUrl" Width="80" Height="80" Elevation="25" Class="rounded-lg ma-2" />
                        </MudItem>
                        
                        <MudItem xs="8">
                            <MudText Typo="Typo.body1" Style="font-weight:bolder;">@prod.name</MudText>
                            <MudText Typo="Typo.body2">@prod.category?.name - # de lotes @prod.lotCount</MudText>
                            @if (prod.tags?.Count > 0)
                            {
                                @foreach (var tag in prod.tags)
                                {
                                    <MudChip Color="Color.Primary" Size="Size.Small">@tag.name</MudChip>
                                }
                            }
                            else
                            {
                                <MudChip Color="Color.Error" Size="Size.Small">Sin etiquetas</MudChip>

                            }
                        </MudItem>
                    
                </MudGrid>
                </a>
                @* <MudCard Style="background-color: #F5F5F5; height:170px;" Class="hover-card" Outlined="true">

                    <a href="/productos/detalle/@prod.productNo" style="display: block; text-decoration: none;">

                        <MudCardHeader>
                        
                            <CardHeaderAvatar>
                                <MudImage Src="@prod.imageUrl" Width="80" Height="80" Elevation="25" Class="rounded-lg ma-2" />
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h5">@prod.name</MudText>
                                <MudText Typo="Typo.body1">@prod.category?.name - # de lotes @prod.lotCount</MudText>
                                @if (prod.tags?.Count > 0)
                                {
                                    @foreach (var tag in prod.tags)
                                    {
                                        <MudChip Color="Color.Primary" Size="Size.Small">@tag.name</MudChip>
                                    }
                                }
                                else
                                {
                                        <MudChip Color="Color.Error" Size="Size.Small">Sin etiquetas</MudChip>
                                
                                }
                            </CardHeaderContent>

                        </MudCardHeader>
                        
                    </a>

                </MudCard> *@

            </MudItem>
        }
    </MudGrid>
    
</MudPaper>

@code {
    private string search_text = string.Empty;
    private List<ProductDTO> product_list = new List<ProductDTO>();

    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Productos", href: null, disabled: true)
        };
        await GetProducts();
    }

    private void AgregarClicked()
    {
        _navigationManager.NavigateTo("/productos/agregar");
    }

    private async Task GetProducts()
    {
        var result = await _productService.ProductList();
        product_list = result!;
    }

}
