@page "/usuarios"
@attribute [Authorize(Policy = "UserRead")]
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@layout MainLayout
@inject NavigationManager _navigationManager
@inject SharedData _data
@inject ISnackbar Snackbar
@inject UserService _userService

<MudPaper Class="mx-2" Style="height:100%; overflow-y:auto; overflow-x: hidden; background-color:white;">
    <MudAppBar Elevation="0" Fixed="false" Style="border-radius: 15px; position: sticky; top: 0;" Dense="true">

        <MudSpacer />

        <AuthorizeView Policy="UserWrite">
            <Authorized>
                <MudButton Class="rounded-pill" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Medium"
                           Color="Color.Primary" OnClick="CrearClicked" Style="text-transform:none">
                    Crear
                </MudButton>
            </Authorized>
        </AuthorizeView>

    </MudAppBar>
    <MudGrid Class="pa-5" Spacing="4">
        @foreach (var u in user_list)
        {
            <MudItem xl="4" lg="6" sm="6" xs="12">

                    <MudCard Class="hover-card">
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                
                                <MudImage Src="@u.imageUrl" Width="90" Height="90" Elevation="25" Class="rounded-lg ma-2" />
                                
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1" Style="font-weight:bolder;">@u.username</MudText>
                                    <MudText Typo="Typo.body2">@u.email</MudText>
                                    <MudText Typo="Typo.body2">@u.role.roleName</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                    <AuthorizeView Policy="UserDelete">
                                        <Authorized>
                                            <div @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                            <MudIconButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Small"
                                                           Color="Color.Error" OnClick="() => OpenDeleteDialog(u.username)" 
                                                           Icon="@Icons.Material.Filled.Delete" Class="my-1">
                                                Eliminar
                                                </MudIconButton>
                                            </div>
                                        </Authorized>

                                    </AuthorizeView>

                                    <AuthorizeView Policy="UserWrite">
                                        <Authorized>


                                            <MudIconButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Small"
                                                           Color="Color.Primary" OnClick="() => EditSubmit(u.username)" Icon="@Icons.Material.Filled.Edit" Class="my-1">
                                                Editar
                                            </MudIconButton>
                                        </Authorized>
                                    </AuthorizeView>
                            </CardHeaderActions>
                        </MudCardHeader>
                    </MudCard>

            </MudItem>
        }
    </MudGrid>

</MudPaper>

<MudDialog @bind-IsVisible="delete_visible">
    <TitleContent>
        <MudText Typo="Typo.h4">
            Desea eliminar al usuario @(current_user)?
        </MudText>
        <MudText Typo="Typo.body1">
            Estas completamente seguro, tambien eliminaras los registros que dependen de esta información.
        </MudText>
    </TitleContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelDelete" Class="px-10">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteSubmit" Class="px-10">Eliminar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string search_text = string.Empty;
    private List<UserDTO> user_list = new List<UserDTO>();
    private bool delete_visible = false;
    private string current_user = string.Empty;

    private void OpenDeleteDialog(string n)
    {
        delete_visible = true;
        current_user = n;
    }

    private void CancelDelete() => delete_visible = false;

    private async Task DeleteSubmit()
    {
        var response = await _userService.DeleteUser(current_user);
        delete_visible = false;

        if (response) Snackbar.Add("Usuario eliminado", Severity.Info);
        else Snackbar.Add("Error al eliminar usuario", Severity.Warning);

        await GetUsers();

    }

    private void EditSubmit(string u) => _navigationManager.NavigateTo("/usuarios/editar/" + u);

    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Usuarios", href: null, disabled: true)
        };

        await GetUsers();

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    private async Task GetUsers()
    {
        var result = await _userService.UserList();
        user_list = result!;
    }

    private void CrearClicked() => _navigationManager.NavigateTo("/usuarios/crear");

}
