@page "/usuarios/crear"
@page "/usuarios/editar/{username}"
@attribute [Authorize(Policy = "UserWrite")]
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@inject NavigationManager _navigationManager
@inject SharedData _data
@inject UserService _userService
@inject ScopeService _scopeService
@inject ISnackbar Snackbar

<MudPaper Class="mx-2" Style="height:100%; overflow-y:auto; overflow-x: hidden; background-color:white;">
    <MudAppBar Elevation="0" Fixed="false" Style="border-radius:24px; position: sticky; top: 0;" Class="pa-0 ma-0" Dense="true">

        <MudText Typo="Typo.h6" Align="Align.Left" Color="Color.Dark" Margin="Margin.Dense">Formulario usuario</MudText>

        <MudSpacer />

        @if (IsEditMode)
        {
            <MudButton Class="rounded-pill mx-2" ButtonType="ButtonType.Submit" Size="Size.Medium" Variant="Variant.Filled"
                       Color="Color.Info" OnClick="OpenPasswordDialog" Style="text-transform:none">
                Cambiar contraseña
            </MudButton>
        }

        <MudButton Class="rounded-pill mx-2" ButtonType="ButtonType.Submit" Size="Size.Medium" Variant="Variant.Filled"
                   Color="Color.Error" OnClick="OnCancelClicked" Style="text-transform:none">
            Cancelar
        </MudButton>

        <MudButton Class="rounded-pill mx-2" ButtonType="ButtonType.Submit" Size="Size.Medium" Variant="Variant.Filled"
                   Color="Color.Primary" OnClick="OnSubmitClicked" Style="text-transform:none">
            @SubmitButtonLabel
        </MudButton>
    </MudAppBar>
    <MudGrid Class="pa-5" Justify="Justify.SpaceAround">
        <MudItem lg="5" md="5" sm="6" xs="12">
            <MudTextField T="string" @bind-Value="username" Label="Nombre de usuario" Class="my-6" Variant="Variant.Outlined" Placeholder="Usuario"/>
            <MudTextField T="string" @bind-Value="email" Label="Correo" Class="my-6" Variant="Variant.Outlined" Placeholder="correo@gmail.com"/>
            <MudTextField T="int?" @bind-Value="phone" Label="Teléfono" Class="my-6" Variant="Variant.Outlined" Placeholder="Número telefónico" />
            
            @if (!IsEditMode)
            {
                <MudTextField T="string" @bind-Value="password" Label="Contraseña" Class="my-6" Variant="Variant.Outlined" Placeholder="********"
                    InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
            }

            <MudSelect T="string" Label="Permisos" AnchorOrigin="Origin.BottomCenter" Class="my-6" @bind-Value="selectedRole"
                    Variant="Variant.Outlined" Placeholder="Selecciona un permiso"  @bind-Value:after="SelectChanged">
                <MudSelectItem Value="@("Admin")" />
                <MudSelectItem Value="@("Developer")" />
                <MudSelectItem Value="@("Dependiente")" />
                <MudSelectItem Value="@("Personalizado")" />
            </MudSelect>
        </MudItem>

        <MudItem lg="5" md="5" sm="6" xs="12">
            <MudCard Class="pa-3">
                <MudCardMedia Image="@photoUrl" Style="background-size: contain; background-color: gray;" />

                <MudFileUpload T="IBrowserFile" OnFilesChanged="OnInputFileChanged">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Info"
                                   Class="rounded-pill ma-2"
                                   for="@context">
                            Subir Foto
                        </MudButton>
                    </ButtonTemplate>
                    <SelectedTemplate>
                        <MudButton Class="rounded-pill ma-2" ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled" Color="Color.Error" OnClick="ClearFile">
                            Limpiar
                        </MudButton>
                        @if (photo != null)
                        {
                            <MudText>@context.Name</MudText>
                        }
                        else
                        {
                            <MudText>@SubmitPhotoLabel</MudText>
                        }
                    </SelectedTemplate>
                </MudFileUpload>

            </MudCard>
        </MudItem>

    </MudGrid>
        
    <MudGrid Justify="Justify.SpaceAround">

        <MudBreakpointProvider>
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudItem lg="1" md="2">
                    <MudText Typo="Typo.body1" Style="font-weight:bolder;">Estado</MudText>
                </MudItem>
            </MudHidden>
        </MudBreakpointProvider>
        
        <MudItem lg="1" md="3" xs="3">
            <MudText Typo="Typo.body1" Style="font-weight:bolder;">Categoría</MudText>
        </MudItem>

        <MudBreakpointProvider>
            <MudHidden Breakpoint="Breakpoint.MdAndDown">
                <MudItem lg="4">
                    <MudText Typo="Typo.body1" Style="font-weight:bolder;">Descripción</MudText>
                </MudItem>
            </MudHidden>
        </MudBreakpointProvider>

        <MudItem lg="1" md="2" sm="2">
            <MudText Typo="Typo.body1" Style="font-weight:bolder;">Lectura</MudText>
        </MudItem>
        <MudItem lg="1" md="2" sm="2">
            <MudText Typo="Typo.body1" Style="font-weight:bolder;">Escritura</MudText>
        </MudItem>
        <MudItem lg="1" md="2" sm="2">
            <MudText Typo="Typo.body1" Style="font-weight:bolder;">Eliminación</MudText>
        </MudItem>

        @foreach (var perm in permission_list)
        {
            var toggleBackground = perm.id % 2 == 0;

            <MudItem xs="12">
                <div style="background-color:@(toggleBackground ? "white" : "lavender");">
                <MudGrid Justify="Justify.SpaceAround">

                        <MudBreakpointProvider>
                            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                <MudItem lg="1" md="2">
                                    @switch (MudChipStatus(perm.id))
                                    {
                                        case 3:
                                            <MudChip Variant="Variant.Text" Color="Color.Primary" Size="Size.Small">Total</MudChip>
                                            break;

                                        case 0:
                                            <MudChip Variant="Variant.Text" Color="Color.Error" Size="Size.Small">Nulo</MudChip>
                                            break;
                                            
                                        default:
                                            <MudChip Variant="Variant.Text" Color="Color.Dark" Size="Size.Small">Parcial</MudChip>
                                            break;

                                    }
                                </MudItem>
                            </MudHidden>
                        </MudBreakpointProvider>

                    <MudItem lg="1" md="3" xs="3">
                            <MudText Typo="Typo.body2">@perm.categoryName</MudText>
                    </MudItem>

                        <MudBreakpointProvider>
                            <MudHidden Breakpoint="Breakpoint.MdAndDown">
                                <MudItem lg="4">
                                    <MudText Typo="Typo.body2">@perm.description</MudText>
                                </MudItem>
                            </MudHidden>
                        </MudBreakpointProvider>
                    
                    <MudItem lg="1" md="2" xs="2">
                            <MudSwitch T="bool" @bind-Checked="@switchesStatus[ScopeId(perm.id, "read")]" Color="Color.Primary" @bind-Checked:after="SwitchChanged"/>
                    </MudItem>

                    <MudItem lg="1" md="2" xs="2">
                            <MudSwitch T="bool" @bind-Checked="@switchesStatus[ScopeId(perm.id, "write")]" Color="Color.Primary" @bind-Checked:after="SwitchChanged" />
                    </MudItem>

                    <MudItem lg="1" md="2" xs="2">
                            <MudSwitch T="bool" @bind-Checked="@switchesStatus[ScopeId(perm.id, "delete")]" Color="Color.Primary" @bind-Checked:after="SwitchChanged" />
                    </MudItem>

                </MudGrid>
                </div>
                
            </MudItem>
        }
        
    </MudGrid>
    
</MudPaper>

<MudDialog @bind-IsVisible="edit_visible">
    <TitleContent>
        <MudText Typo="Typo.h4">
            Cambiar contraseña 
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" @bind-Value="password" Label="Contraseña" Class="my-6" Variant="Variant.Outlined" Placeholder="********"
                      InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => ClosePasswordDialog(true)" Class="px-10">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ClosePasswordDialog(false)" Class="px-10">Aceptar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    List<ScopeDTO> scope_list = new List<ScopeDTO>();
    List<PermissionCategoryDTO> permission_list = new List<PermissionCategoryDTO>();
    List<RoleDTO> role_list = new List<RoleDTO>();
    Dictionary<int, bool> switchesStatus = new Dictionary<int, bool>();

    List<ScopeDTO> dev_scopes = new List<ScopeDTO>();
    List<ScopeDTO> admin_scopes = new List<ScopeDTO>();
    List<ScopeDTO> dep_scopes = new List<ScopeDTO>();
    List<ScopeDTO> user_scopes = new List<ScopeDTO>();
    List<ScopeDTO> selected_scopes = new List<ScopeDTO>();

    string username;
    string email;
    int? phone;
    string password;

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private IBrowserFile? photo;
    private string photoUrl = string.Empty;
    private string photoB64 = string.Empty;

    [Parameter]
    public string Username { get; set; }
    bool IsEditMode => !string.IsNullOrEmpty(Username);
    string SubmitButtonLabel => IsEditMode ? "Editar" : "Crear";
    string SubmitPhotoLabel => IsEditMode ? "Al no subir foto se dejará la anterior" : "Sin foto";
    string SubmitBreadCrumbLabel => IsEditMode ? "Editar usuario" : "Nuevo usuario";

    public void SwitchChanged() => selectedRole = "Personalizado"; 

    public void GenerateSwitchesValues()
    { 
        foreach(var scope in scope_list) switchesStatus.Add(scope.id, false);  
    }

    public int MudChipStatus(int category)
    {
        int counter = 0;
        var scopes = scope_list.Where(scope => scope.categoryId == category).ToList();
        foreach(var s in scopes) if (switchesStatus[s.id]) counter++;
        return counter;
    }


    public int ScopeId(int category, string perm)
    {
        int id = scope_list.Where(scope => scope.categoryId == category).ToList()
        .FirstOrDefault(scope => scope.scope.Contains(perm)).id;

        return id;
    }

    private bool edit_visible;
    private void OpenPasswordDialog() => edit_visible = true;
    private async Task ClosePasswordDialog(bool cancel)
    {
        if(cancel)
        {
            password = string.Empty;

        }
        else
        {
            if (!String.IsNullOrEmpty(password))
            {
                var success = await _userService.NewPassword(Username, password);
                if (success)
                {
                    edit_visible = false;
                    Snackbar.Add("Contraseña cambiada correctamente", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Error al cambiar contraseña", Severity.Error);
                    edit_visible = false;
                }
            }
            else Snackbar.Add("Escribe una contraseña!", Severity.Error);
            
        }
        
    }

    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Usuarios", href: "/usuarios"),
            new BreadcrumbItem(SubmitBreadCrumbLabel, href: null, disabled:true),
        };
        
        permission_list = await _scopeService.GetPermissionCategories();
        role_list = await _userService.RoleList();
        scope_list = await _scopeService.GetScopes();
        GenerateSwitchesValues();

        dev_scopes = await _scopeService.GetRoleScopes("developer");
        admin_scopes = await _scopeService.GetRoleScopes("admin");
        dep_scopes = await _scopeService.GetRoleScopes("dependant");

        if (IsEditMode)
        {
            user_scopes = await _scopeService.GetUserScopes(Username);
            UserDTO user_data = await _userService.GetUser(Username);
            username = user_data.username;
            email = user_data.email;
            phone = user_data.phone;
            if (user_data.role.roleName == "dependant")
                selectedRole = "Dependiente";
            else if (user_data.role.roleName == "admin")
                selectedRole = "Admin";
            else if (user_data.role.roleName == "developer")
                selectedRole = "Developer";
            else selectedRole = "Personalizado";

            foreach (var s in user_scopes) switchesStatus[s.id] = true;
        }
        else selectedRole = "Personalizado";

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    private void OnCancelClicked()
    {
        _navigationManager.NavigateTo("/usuarios");
    }

    private async Task OnSubmitClicked()
    {
        if (!IsEditMode)
        {
            var user = await CreateUser();

            if (user.id != null && user.id > 0)
            {
                if (!string.IsNullOrEmpty(photoB64)) await AddPhoto(user.username, photoB64);

                LoadSelectedScopes();
                var result = await _scopeService.SetUserScopes(user.username, selected_scopes);

                Snackbar.Add("Usuario creado correctamente", Severity.Success);
                _navigationManager.NavigateTo("/usuarios");
            }
            else Snackbar.Add("Error al crear usuario", Severity.Error);
        }
        else
        {
            var user = await EditUser();

            if (user.id != null && user.id > 0)
            {
                LoadSelectedScopes();
                var result = await _scopeService.SetUserScopes(user.username, selected_scopes);

                bool photo_update = false;
                if (!string.IsNullOrEmpty(photoB64))
                {
                    photo_update = await AddPhoto(user.username, photoB64);
                }

                if (photo_update) Snackbar.Add("Foto actualizada correctamente", Severity.Success);

                Snackbar.Add("Usuario actualizado correctamente", Severity.Success);
                _navigationManager.NavigateTo($"/usuarios");
            }
            else Snackbar.Add("Error al actualizar usuario", Severity.Error);
        }

    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        photo = e.File;
        photoB64 = await ConvertToB64(photo);
        photoUrl = ConvertToUrl(photoB64);
    }

    private string ConvertToUrl(string base64)
    {
        var url = $"data:{photo?.ContentType};base64,{base64}";
        return url;
    }

    private async Task<string> ConvertToB64(IBrowserFile file)
    {
        using var stream = file.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        return Convert.ToBase64String(memoryStream.ToArray());
    }

    public UserDTO SetUser()
    {
        UserDTO user = new UserDTO();

        user.username = username;
        user.email = email;
        user.phone = phone;
        user.password = password;

        // Semilla para el generador de números aleatorios
        Random random = new Random();
        // Generar un número aleatorio de 6 dígitos
        int numeroAleatorio = GenerarNumeroAleatorio(random, 100000, 999999);
        static int GenerarNumeroAleatorio(Random random, int min, int max) => random.Next(min, max + 1);

        user.pharmacistCode = Convert.ToString(numeroAleatorio);
        if (selectedRole == "Dependiente")
            user.role = role_list.FirstOrDefault(role => role.roleName == "dependant");
        else if (selectedRole == "Personalizado")
            user.role = role_list.FirstOrDefault(role => role.roleName == "custom");
        else
            user.role = role_list.FirstOrDefault(role => role.roleName == selectedRole.ToLower());

        return user;
    }

    private async Task<UserDTO> CreateUser()
    {
        UserDTO new_user = SetUser();

        var result = await _userService.CreateUser(new_user);
        return result;
    }

    private async Task<UserDTO> EditUser()
    {
        UserDTO updated_user = SetUser();

        var result = await _userService.EditUser(Username, updated_user);
        return result;
    }

    private async Task<bool> AddPhoto(string username, string photo64)
    {
        var result = await _userService.AddPhoto(username, photo.Name, photo.ContentType, photoB64);
        return result;
    }

    private void ClearFile()
    {
        photo = null;
        photoB64 = string.Empty;
        photoUrl = string.Empty;
    }

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private string selectedRole { get; set; }

    public void SelectChanged()
    {
        if (selectedRole == "Admin") foreach (var s in admin_scopes) switchesStatus[s.id] = true;

        else if (selectedRole == "Developer") foreach (var s in dev_scopes) switchesStatus[s.id] = true;

        else if (selectedRole == "Dependiente")
        {
            foreach (var key in switchesStatus.Keys.ToList()) switchesStatus[key] = false;
            foreach (var s in dep_scopes) switchesStatus[s.id] = true;
        }

    }

    private void LoadSelectedScopes()
    {
        selected_scopes.Clear();

        foreach (var kvp in switchesStatus)
        {
            int id = kvp.Key;
            bool status = kvp.Value;

            ScopeDTO scope = scope_list.Find(s => s.id == id);

            if (scope != null && status)
            {
                selected_scopes.Add(scope);
            }
        }
    }

}
