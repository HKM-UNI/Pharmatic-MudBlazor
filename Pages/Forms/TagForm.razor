@page "/metadata/tags"
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@layout MainLayout
@inject TagService _tagService
@inject NavigationManager _navigationManager
@inject SharedData _data
@inject ISnackbar Snackbar

<MudPaper Class="mx-2" Style="height:100%; overflow-y:auto; overflow-x: hidden; background-color:white;">
    <MudAppBar Elevation="0" Fixed="false" Style="border-radius: 15px; position: sticky; top: 0;">
        <MudTextField @bind-Value="@search_text" Placeholder="Buscar" Variant="Variant.Outlined" Adornment="Adornment.Start"
                      AdornmentIcon="@CustomIcons.Search" Margin="Margin.Dense" />

        <MudSpacer />

        <MudButton Class="rounded-pill" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Medium"
                   Color="Color.Primary" OnClick="OpenAddDialog" Style="text-transform:none">
            Agregar
        </MudButton>
    </MudAppBar>
    <MudGrid Class="pa-3" Spacing="1">
        @foreach (var tag in tag_list)
        {
            <MudItem lg="3" md="4" sm="6" xs="12">
                <MudCard Style="background-color: #F5F5F5">
                    <MudCardHeader>
                        <MudCardContent Style="display: flex; justify-content: space-evenly; align-items: center;">
                            <MudText Typo="Typo.body1">@tag.name</MudText>

                        </MudCardContent>
                        <MudCardActions>
                            <MudIconButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Small"
                                       Color="Color.Error" OnClick="() => OpenDeleteDialog(tag.name, tag.tagNo)"
                                       Icon="@Icons.Material.Filled.Delete" Class="mx-1">
                                Eliminar
                            </MudIconButton>

                            <MudIconButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Small"
                                       Color="Color.Primary" OnClick="() => OpenEditDialog(tag.name, tag.tagNo)"
                                       Icon="@Icons.Material.Filled.Delete" Class="mx-1">
                                Editar
                            </MudIconButton>
                        </MudCardActions>
                    </MudCardHeader>
                    
                </MudCard>
            </MudItem>
        }
    </MudGrid>

</MudPaper>

<MudDialog @bind-IsVisible="add_visible">
    <TitleContent>
        <MudText Typo="Typo.h4">
            Creación de tag
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="tag_txt" Label="Nombre tag" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="CloseAddDialog" Class="px-10">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddSubmit" Class="px-10">Crear</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="edit_visible">
    <TitleContent>
        <MudText Typo="Typo.h4">
            Edición de tag
        </MudText>
        <MudText Typo="Typo.body1">
            Nombre actual de tag: @current_tag
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="tag_txt" Label="Nuevo nombre" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="CloseEditDialog" Class="px-10">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="EditSubmit" Class="px-10">Editar</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="delete_visible">
    <TitleContent>
        <MudText Typo="Typo.h4">
            Desea eliminar @current_tag?
        </MudText>
        <MudText Typo="Typo.body1">
            Estas completamente seguro, tambien eliminaras los registros que dependen de esta información.
        </MudText>
    </TitleContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CloseDeleteDialog" Class="px-10">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteSubmit" Class="px-10">Eliminar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string search_text = string.Empty;
    private List<TagDTO> tag_list = new List<TagDTO>();

    private string tag_txt;
    private string current_tag;
    private int current_tag_id = -1;

    private bool add_visible;
    private void OpenAddDialog() => add_visible = true;
    private void CloseAddDialog()
    {
        add_visible = false;
        tag_txt = string.Empty;
    }

    private async Task AddSubmit()
    {
        if (tag_txt.Count() > 0)
        {
            TagDTO new_tag = new TagDTO();
            new_tag.name = tag_txt;

            var result = await _tagService.CreateTag(new_tag);

            if (result != null)
            {
                Snackbar.Add("Tag creado correctamente", Severity.Success);
                await GetTags();
            }
            else Snackbar.Add("Error al crear tag", Severity.Error);

            add_visible = false;
        }
        else Snackbar.Add("Ingresa un nombre válido", Severity.Warning);
    }

    private bool edit_visible;
    private void OpenEditDialog(string n, int id)
    {
        edit_visible = true;
        current_tag = n;
        current_tag_id = id;
    }
    private void CloseEditDialog()
    {
        edit_visible = false;
        tag_txt = string.Empty;
    }

    private async Task EditSubmit()
    {
        if (tag_txt.Count() > 0)
        {
            TagDTO updated_tag = new TagDTO();
            updated_tag.tagNo = current_tag_id;
            updated_tag.name = tag_txt;

            var result = await _tagService.EditTag(current_tag_id, updated_tag);

            if (result != null)
            {
                Snackbar.Add("Tag actualizado correctamente", Severity.Success);
                await GetTags();
            }
            else Snackbar.Add("Error al actualizar Tag", Severity.Error);

            edit_visible = false;
        }
        else Snackbar.Add("Ingresa un nombre válido", Severity.Warning);
    }


    private bool delete_visible;
    private void OpenDeleteDialog(string n, int id)
    {
        delete_visible = true;
        current_tag = n;
        current_tag_id = id;
    }
    private void CloseDeleteDialog() => delete_visible = false;

    private async Task DeleteSubmit()
    {
        var response = await _tagService.DeleteTag(current_tag_id);
        delete_visible = false;

        await GetTags();

        if (response) Snackbar.Add("Tag eliminado", Severity.Info);
        else Snackbar.Add("No se pudo eliminar el tag", Severity.Warning);
    }


    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Metadata", href: "/metadata"),
            new BreadcrumbItem("Tags", href: null, disabled: true)
        };

        await GetTags();

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    private async Task GetTags()
    {
        var result = await _tagService.TagList();
        tag_list = (List<TagDTO>)result!;
    }
}