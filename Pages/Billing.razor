@page "/ventas/facturacion"
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@layout MainLayout
@inject NavigationManager _navigationManager
@inject CustomerService _customerService
@inject SalesService _salesService
@inject SharedData _data
@inject ISnackbar Snackbar

<MudPaper>
    <MudAppBar Elevation="0" Fixed="false" Style="border-radius: 15px; position: sticky; top: 0;">

        <MudAutocomplete Placeholder="Buscar productos" @bind-Value="search_product" Variant="Variant.Outlined" AdornmentIcon="@CustomIcons.Search"
                         Adornment="Adornment.Start" Margin="Margin.Dense">
            <NoItemsTemplate>
                <MudText Align="Align.Center" Class="px-4 py-1">
                    No items found
                </MudText>
            </NoItemsTemplate>
        </MudAutocomplete>

        <MudSpacer />

        <MudButton Class="rounded-pill mx-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Large"
                   Color="Color.Primary" OnClick="CheckOut">
            Realizar facturación
        </MudButton>

        <MudIconButton Icon="@CustomIcons.Bag" Color="Color.Primary" Size="Size.Large" Class="ml-10" />
        <MudText Typo="Typo.h5" Color="Color.Dark">@_data.product_cart.Sum(pair => pair.Value)</MudText>

    </MudAppBar>
    <MudGrid Class="px-10 pb-5 mt-5" Spacing="1" Style="height: 350px; overflow: auto;">

        <MudItem xs="5" Class="bill-column grid-border" Style="border-left: 1px solid transparent; border-top: 1px solid transparent;">
                <MudText Typo="Typo.h4">Detalles de producto</MudText>
            </MudItem>

        <MudItem xs="3" Class="bill-column grid-border" Style="border-top: 1px solid transparent;">
                <MudText Typo="Typo.h4">Cantidad</MudText>
            </MudItem>

        <MudItem xs="2" Class="bill-column grid-border" Style="border-top: 1px solid transparent;">
                <MudText Typo="Typo.h4">Precio</MudText >
            </MudItem>

        <MudItem xs="2" Class="bill-column grid-border" Style="border-top: 1px solid transparent;">
                <MudText Typo="Typo.h4">Sub total</MudText>
            </MudItem>

        @foreach (var p in _data.product_cart)
        {
            <MudItem xs="5" Class="grid-border pl-3" Style="border-left: 1px solid transparent;">
                <MudText Typo="Typo.h5" Inline="true">@p.Key.Product?.Name</MudText>
                <MudText Typo="Typo.body1" Inline="true"> @p.Key.Composition?.Dose?.Name @p.Key.Composition?.Roa?.Description - @p.Key.Composition?.ContentSize @p.Key.Composition?.Measure?.Unit </MudText>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Outlined.PersonOutline" Size="Size.Medium" /> @p.Key.Provider?.Name
                    <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Medium" /> @p.Key.ExpirationDate.ToString("dd/MM/yyyy")
                </MudText>
            </MudItem>

            <MudItem xs="3" Class="bill-item grid-border">
                <MudButton Variant="Variant.Outlined" Size="Size.Large" Color="Color.Primary" Class="mx-3" OnClick="() => Increase(p.Key)">+</MudButton>
                <MudText Typo="Typo.h6" Inline="true">@p.Value</MudText>
                <MudButton Variant="Variant.Outlined" Size="Size.Large" Color="Color.Error" Class="mx-3" OnClick="() => Decrease(p.Key)">-</MudButton>
            </MudItem>

            <MudItem xs="2" Class="bill-item grid-border">
                <MudText Typo="Typo.body1">C$ @p.Key.SellingPrice</MudText>
            </MudItem>

            <MudItem xs="2" Class="bill-item grid-border">
                <MudText Typo="Typo.body1">C$ @(p.Key.SellingPrice*p.Value)</MudText>
            </MudItem>
        }
    </MudGrid>

    <MudGrid Justify="Justify.SpaceAround" Class="px-5 mt-1 pb-5">

        <MudItem xs="5" Class="mt-5">
            <MudAutocomplete Placeholder="Cliente de factura" @bind-Value="txtCustomer" Variant="Variant.Outlined" AdornmentIcon="@CustomIcons.Search"
                             Adornment="Adornment.Start" Margin="Margin.Dense" SearchFunc="SearchCustomers" T="string" ShowProgressIndicator="true"
                             ProgressIndicatorColor="@Color.Primary">
                <NoItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">
                        No se encontró
                    </MudText>
                </NoItemsTemplate>
            </MudAutocomplete>
        </MudItem>

        <MudItem xs="4" Class="mt-5">
            <MudGrid Class="px-5">

                <MudItem xs="8" Class="bill-detail py-1">
                        <MudSwitch @bind-Checked="@discount_enabled" Color="Color.Primary" />
                        <MudText Typo="Typo.body1">Descuento</MudText>
                </MudItem>

                <MudItem xs="4" Class="py-1">
                    <MudTextField @bind-Value="discount_amount" Margin="Margin.Dense"
                                  Adornment="Adornment.End" AdornmentText="%" Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="8" Class="bill-detail py-1">
                    <MudText Typo="Typo.body1">Sub total</MudText>
                </MudItem>

                <MudItem xs="4" Class="py-1">
                    <MudTextField Value="@SubTotal()" Margin="Margin.Dense" ReadOnly="true" Disabled="true"
                                  Adornment="Adornment.End" AdornmentText="C$" Variant="Variant.Outlined" />
                </MudItem>
                
                <MudItem xs="8" Class="bill-detail py-1">
                        <MudSwitch @bind-Checked="@iva_enabled" Color="Color.Primary" />
                        <MudText Typo="Typo.body1">IVA</MudText>
                </MudItem>

                <MudItem xs="4" Class="py-1">
                    <MudTextField Value="@IVA(SubTotal())" Margin="Margin.Dense" ReadOnly="true" Disabled="true"
                                  Adornment="Adornment.End" AdornmentText="C$" Variant="Variant.Outlined"/>
                </MudItem>
                
                <MudItem xs="8" Class="bill-detail py-1">
                    <MudText Typo="Typo.body1">Total</MudText>
                </MudItem>

                <MudItem xs="4" Class="py-1">
                    <MudTextField Value="@Total()" Margin="Margin.Dense" ReadOnly="true" Disabled="true"
                                  Adornment="Adornment.End" AdornmentText="C$" Variant="Variant.Outlined" />
                </MudItem>

            </MudGrid>

        </MudItem>

    </MudGrid>

</MudPaper>

<MudDialog @bind-IsVisible="remove_visible">
    <TitleContent>
        <MudText Typo="Typo.h4">
            ¿Remover producto del carrito?
        </MudText>
    </TitleContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="CancelDelete" Class="px-10">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteSubmit" Class="px-10">Remover</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .bill-column {
        position: sticky;
        top: 0;
        background-color: white;
        z-index: 1;
    }

    .bill-item{
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 0;
    }

    .grid-border{
        border: 1px solid transparent;
        border-left: 1px solid #000;
        border-top: 1px solid #000;
    }

    .bill-detail{
        display: flex; 
        align-items:center;
        justify-content: flex-end;
    }
</style>

@code {
    private SalesInvoiceDTO invoice = new SalesInvoiceDTO();
    private List<SalesDetailsDTO> invoice_details = new List<SalesDetailsDTO>();

    private string txtCustomer = string.Empty;
    private string search_product = string.Empty;
    private bool discount_enabled = false;
    private bool iva_enabled = true;

    private int discount_amount = 0;
    private const float iva = 0.15f;

    private double SubTotal()
    {
        double subTotal = _data.product_cart.Sum(kvp => kvp.Key.SellingPrice * kvp.Value) ?? 0;

        if (discount_enabled) subTotal -= subTotal * discount_amount / 100;

        return subTotal;
    }

    private double IVA(double amount) => amount * iva;
    private double Total() => iva_enabled ? SubTotal() + IVA(SubTotal()) : SubTotal();

    private List<CustomerDTO> customer_list = new List<CustomerDTO>();
    private TaskCompletionSource<bool> customersLoadedTask = new TaskCompletionSource<bool>();
    private LotDTO current_lot = new LotDTO();

    private bool remove_visible = false;
    private void OpenRemoveDialog(LotDTO lot)
    {
        remove_visible = true;
        current_lot = lot;
    }

    void CancelDelete() => remove_visible = false;
    void DeleteSubmit()
    {
        _data.product_cart.Remove(current_lot);
        remove_visible = false;
        Snackbar.Add("Producto removido", Severity.Info);
    }

    private void Increase(LotDTO lot) { _data.product_cart[lot]++; }
    private void Decrease(LotDTO lot)
    {
        if (_data.product_cart[lot] <= 1)
            OpenRemoveDialog(lot);
        else _data.product_cart[lot]--;
    }

    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Carrito", href: "/ventas/carrito"),
            new BreadcrumbItem("Facturación", href: null, disabled:true),
        };

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        await GetCustomers();
        customersLoadedTask.SetResult(true);

    }

    private async Task GetCustomers()
    {
        var result = await _customerService.CustomerList();
        customer_list = result!;
    }

    private async Task<IEnumerable<string>> SearchCustomers(string value)
    {
        await customersLoadedTask.Task;

        if (!string.IsNullOrEmpty(value))
            return customer_list
                .Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .Select(x => x.Name);

        else return customer_list.Select(x => x.Name);
    }

    private int GetCustomerId()
    {
        var c = customer_list.Find(customer => customer.Name.Equals(txtCustomer, StringComparison.InvariantCultureIgnoreCase));

        if (c != null) return c.CustomerNo;

        return -1;
    }

    private async Task CheckOut()
    {
        if (_data.product_cart.Count > 0)
        {
            int customer_id = GetCustomerId();
            if (customer_id >= 0) invoice.CustomerNo = customer_id;

            invoice.Discount = discount_amount;
            invoice.SalesDate = DateTime.Now;

            var first_result = await _salesService.CreateInvoice(invoice);

            if (first_result != null)
            {
                invoice = first_result;

                foreach (var prod in _data.product_cart)
                {
                    SalesDetailsDTO temp = new SalesDetailsDTO();

                    temp.InvoiceNo = invoice.InvoiceNo;
                    temp.LotNo = prod.Key.LotNo;
                    temp.Quantity = prod.Value;

                    invoice_details.Add(temp);
                }


                invoice.Details = invoice_details;

                var end_result = await _salesService.EditInvoice(invoice.InvoiceNo, invoice);

                if (end_result != null)
                {
                    Snackbar.Add("Venta realizada correctamente", Severity.Success);
                    _data.product_cart = new Dictionary<LotDTO, int>();
                    _navigationManager.NavigateTo($"/ventas/carrito/");
                }
                else Snackbar.Add("Error al generar factura", Severity.Error);
            }
            else
            {
                Snackbar.Add("Error al crear factura", Severity.Error);
            }

        }
        else Snackbar.Add("No hay productos en el carrito", Severity.Warning);
    }
}

