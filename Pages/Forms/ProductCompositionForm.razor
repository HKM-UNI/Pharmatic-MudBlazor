@page "/composiciones/agregar"
@page "/composiciones/editar/{id}"
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@layout MainLayout
@inject NavigationManager _navigationManager
@inject SharedData _data

@inject RouteOfAdministrationService _roaService
@inject TypeDoseService _doseService
@inject MeasureService _measureService

<MudPaper>
    <MudAppBar Elevation="0" Fixed="false" Style="border-radius: 15px; position: sticky; top: 0;">

        <MudSpacer/>

        <MudButton Class="rounded-pill mx-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Large"
                   Color="Color.Error" OnClick="SaveClicked">
            Cancelar
        </MudButton>

        <MudButton Class="rounded-pill mx-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Large"
                   Color="Color.Primary" OnClick="SaveClicked">
            @SubmitButtonLabel
        </MudButton>
    </MudAppBar>

    <MudGrid Justify="Justify.Center" Class="pa-5">
        <MudItem xs="8">
            <EditForm Model="_prodcomp">
                <MudSelect T="string" Label="Tipo de dosis" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" FullWidth="true">
                    @foreach (var d in dose_list)
                    {
                        <MudSelectItem Value="@d.Name" />
                    }
                </MudSelect>

                <MudSelect T="string" Label="Unidad de medida" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" FullWidth="true">
                    @foreach (var m in measure_list)
                    {
                        <MudSelectItem Value="@m.Unit" />
                    }
                </MudSelect>

                <MudTextField @bind-Value="txtQuantity" Label="Cantidad (en base a la unidad de medida)" Variant="Variant.Outlined" FullWidth="true">

                </MudTextField>

                <MudSelect T="string" Label="Vía de administración" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" FullWidth="true">
                    @foreach (var roa in roa_list)
                    {
                        <MudSelectItem Value="@roa.Description" />
                    }
                </MudSelect>
            </EditForm>
        </MudItem>
    </MudGrid>

</MudPaper>
@code {
    [Parameter]
    public ProductCompositionDTO _prodcomp { get; set; } = new ProductCompositionDTO();

    private string txtQuantity;

    private List<TypeDoseDTO> dose_list = new List<TypeDoseDTO>();
    private List<MeasureDTO> measure_list = new List<MeasureDTO>();
    private List<RouteOfAdmDTO> roa_list = new List<RouteOfAdmDTO>();

    [Parameter]
    public string Id { get; set; }
    bool IsEditMode => !string.IsNullOrEmpty(Id);
    string FormTitle => IsEditMode ? "Editar composición" : "Crear composición";
    string SubmitButtonLabel => IsEditMode ? "Actualizar" : "Guardar";

    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Composiciones", href: "/composiciones"),
            new BreadcrumbItem(FormTitle, href: null, disabled: true)
        };

        await GetSelectData();
    }

    private async Task GetSelectData()
    {
        var d_result = await _doseService.TypeDoseList();
        dose_list = d_result!;

        var m_result = await _measureService.MeasureList();
        measure_list = m_result!;

        //var r_result = await _roaService.RoutesOfAdmList();
        //roa_list = r_result!;
    }

    private void SaveClicked()
    {
        _navigationManager.NavigateTo("/composiciones/");
    }
}
