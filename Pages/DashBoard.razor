@page "/dashboard"
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@using Pharmatic.Extensions;
@layout MainLayout
@inject SharedData _data
@inject SalesService _salesService
@inject LotService _lotService
@inject CustomerService _customerService
@inject ProviderService _providerService
@inject MetricsService _metricsService

<div style="height:100%; overflow-y:auto; overflow-x: hidden; background-color:transparent; border-color:transparent;">

    <MudGrid Class="px-2" Spacing="2" Justify="Justify.SpaceBetween">
    
    <MudItem md="3" sm="6" xs="12">
        <MudCard>
                <MudCardHeader>
                <CardHeaderAvatar>
                        <MudAvatar Color="Color.Info" Variant="Variant.Outlined" Size="Size.Large">
                            <MudIcon Icon="@Icons.TwoTone.AccountCircle" Size="Size.Large" Color="Color.Info"></MudIcon>
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@stats.customers</MudText>
                    <MudText Typo="Typo.body2">Clientes</MudText>
                </CardHeaderContent>
            </MudCardHeader>
        </MudCard>
    </MudItem>

    <MudItem md="3" sm="6" xs="12">
        <MudCard>
            <MudCardHeader>
                <CardHeaderAvatar>
                        <MudAvatar Size="Size.Large" Variant="Variant.Outlined" Color="Color.Error">
                            <MudIcon Icon="@Icons.TwoTone.SupervisedUserCircle" Size="Size.Large" Color="Color.Error"></MudIcon>
                        </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@stats.providers</MudText>
                    <MudText Typo="Typo.body2">Proveedores</MudText>
                </CardHeaderContent>
            </MudCardHeader>
        </MudCard>
    </MudItem>

    <MudItem md="3" sm="6" xs="12">
        <MudCard>
            <MudCardHeader>
                <CardHeaderAvatar>
                        <MudAvatar Color="Color.Warning" Variant="Variant.Outlined" Size="Size.Large">
                            <MudIcon Icon="@Icons.TwoTone.AccountBalanceWallet" Size="Size.Large" Color="Color.Warning"></MudIcon>
                        </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">$@stats.salesAmountToday</MudText>
                    <MudText Typo="Typo.body2">Ventas de hoy</MudText>
                </CardHeaderContent>
            </MudCardHeader>
        </MudCard>
    </MudItem>

    <MudItem md="3" sm="6" xs="12">
        <MudCard>
            <MudCardHeader>
                <CardHeaderAvatar>
                        <MudAvatar Color="Color.Success" Variant="Variant.Outlined" Size="Size.Large">
                            <MudIcon Icon="@Icons.TwoTone.BusinessCenter" Size="Size.Large" Color="Color.Success"></MudIcon>
                        </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">$@stats.salesAmountMonth</MudText>
                    <MudText Typo="Typo.body2">Ventas del mes</MudText>
                </CardHeaderContent>
            </MudCardHeader>
        </MudCard>
    </MudItem>
    
    <MudItem md="6" sm="12" xs="12">
        <MudPaper>

			<MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="310px" ChartOptions="options">
				<CustomGraphics>
					<style>
                        .mud-chart-bar {
                            stroke-width: 20px;
                        }
					</style>
				</CustomGraphics>

			</MudChart>

        </MudPaper>

    </MudItem>

    <MudItem md="6" sm="12" xs="12">
            <MudDataGrid Items="@recent_list" Dense="true">

                <ToolBarContent>
                    <MudText Typo="Typo.h6">Productos agregados recientemente</MudText>
                </ToolBarContent>

                <Columns>
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                                <MudImage Src="@context.Item.productImage" Width="38" Height="38" Elevation="25"/>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.productName" Title="Nombre" />
                    <PropertyColumn Property="x => x.price" Title="Precio"/>
                    <PropertyColumn Property="x => x.stock" Title="Stock" />
                </Columns>
            </MudDataGrid>
    </MudItem>

        <MudItem md="12">
            
            <MudDataGrid T="ExpiredDTO" Items="@expired_list.Take(4)" >

                <ToolBarContent>
                    <MudText Typo="Typo.h6">Productos vencidos</MudText>
                </ToolBarContent>

                <Columns>
                    <PropertyColumn Property="x => x.consign" Title="Consigna" />
                    <PropertyColumn Property="x => x.productName" Title="Nombre" />
                    <PropertyColumn Property="x => x.dosageForm" Title="Tipo de dósis" />
                    <PropertyColumn Property="x => x.expirationDate" Title="Fecha de vencimiento" CellStyleFunc="@_cellStyleFunc">
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.purchasePrice" Title="Precio compra" />
                    <PropertyColumn Property="x => x.stock" Title="Stock" />
                </Columns>
            </MudDataGrid>
        </MudItem>

</MudGrid>
</div>
@code {
    // Meses de diferencia en el grafico
    private const int ChartDateDeltaMonths = -9;
    private IEnumerable<ExpiredDTO> expired_list = new List<ExpiredDTO>();
    private IEnumerable<RecentLotDTO> recent_list = new List<RecentLotDTO>();
    private SummaryDTO stats = new();
    static string[] colors = { "#008000" };

    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home, disabled:true),
        };

        await InitUI();
    }

    private async Task InitUI()
    {
        await GetExpirationReport();
        await GetRecentlyAddedProducts();
        await UpdateStats();
        UpdateChart(await GetInvoicingMetrics());
    }

    private async Task GetExpirationReport()
    {
        expired_list = await _lotService.ExpirationReport();
    }

    private async Task GetRecentlyAddedProducts()
    {
        recent_list = await _lotService.RecentlyAdded();
    }

    private async Task UpdateStats()
    {
        stats = await _metricsService.GetSummary();
    }

    private async Task<List<InvoicingSummaryDTO>> GetInvoicingMetrics()
    {
        var now = DateTime.Now;
        @* Obtiene la fecha final de este mes
            Este es un truco de desarrollo para incluir la data simulada
              que esta por delante de la fecha actual.
            No se debe usar en produccion *@
        var endDate = new DateOnly(now.Year, now.Month, 1)
            .AddMonths(1)
            .AddDays(-1);

        @* Offset para coincidir "n" meses desde la fecha final de este mes *@
        var startDate = endDate
            .AddMonths(ChartDateDeltaMonths - 1)
            .AddDays(1);
        
        return await _metricsService.GetInvoicingSummary(
            startDate.ToIsoString(), endDate.ToIsoString()
        );
    }

    private Func<ExpiredDTO, string> _cellStyleFunc => x =>
    {
        string style = "";

        if (x.expirationDate < DateTime.Now)
            style += "background-color:rgba(255, 0, 0, 0.4);";
        else style += "background-color:rgba(255, 255, 0, 0.4);";

        return style;
    };

    ChartOptions options = new ChartOptions()
        {
            LineStrokeWidth = 12,
            ChartPalette = colors,
        };

    public List<ChartSeries> Series = new List<ChartSeries>();

    public string[] XAxisLabels = Array.Empty<string>();

    private void UpdateChart(List<InvoicingSummaryDTO> metrics)
    {
        // Extrae los nombres de los meses
        XAxisLabels = metrics.Select(m => m.MonthName).ToArray();

        // Extrae los totales de venta
        var monthSales = metrics.Select(m => m.salesAmount).ToArray();

        // Actualiza las series del gráfico
        Series = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Ventas " + DateTime.Now.Year.ToString(),
                Data = monthSales
            }
        };
    }

    
}