@page "/productos/agregar"
@page "/productos/editar/{id}"
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@layout MainLayout
@inject NavigationManager _navigationManager
@inject ProductService _productService
@inject SharedData _data
@inject ISnackbar Snackbar

@inject TagService _tagService
@inject CategoryService _catService
@inject SubCategoryService _subcatService

<MudPaper Class="ma-5">
    <MudAppBar Elevation="0" Fixed="false" Style="border-radius: 15px;">

        <MudSpacer />

        <MudButton Class="rounded-pill" ButtonType="ButtonType.Submit" Size="Size.Large" Variant="Variant.Filled"
                   Color="Color.Error" Style="margin-right:10px;" OnClick="OnCancelClicked">
            Cancelar
        </MudButton>

        <MudButton Class="rounded-pill" ButtonType="ButtonType.Submit" Size="Size.Large" Variant="Variant.Filled"
                   Color="Color.Primary" OnClick="OnSubmitClicked">
            @SubmitButtonLabel
        </MudButton>
    </MudAppBar>
    <MudGrid Class="pa-5">
        <MudItem xs="6">
                <MudTextField T="string" @bind-Value="prod_name" Label="Nombre" Class="my-5" Variant="Variant.Outlined"/>
                <MudTextField T="string" @bind-Value="prod_desc" Label="Descripción" Lines="5" Class="my-5" Variant="Variant.Outlined" />
                
                <MudSelect T="string" @bind-Value="category" Label="Categoría" AnchorOrigin="Origin.BottomCenter" Class="my-5" Variant="Variant.Outlined">
                    @foreach (var cat in cat_list)
                    {
                        <MudSelectItem Value="@cat.name"/>
                    }
                </MudSelect>
                
                <MudSelect T="string" @bind-Value="sub_cat" Label="SubCategoría" AnchorOrigin="Origin.BottomCenter" Class="my-5" Variant="Variant.Outlined">
                    @foreach (var subcat in subcat_list)
                    {
                        <MudSelectItem Value="@subcat.name"/>
                    }
                    
                </MudSelect>
                <MudSelect T="string" Label="Tags" AnchorOrigin="Origin.BottomCenter" MultiSelection="true" Class="my-5" Variant="Variant.Outlined" @bind-SelectedValues="selected_tags">
                    @foreach (var tag in tag_list)
                    {
                        <MudSelectItem Value="@tag.name"/>
                    }
                </MudSelect>     
        </MudItem>

        <MudItem xs="6">
            <MudCard Class="pa-5">
                <MudCardMedia Image="@photoUrl" Height="450" Style="background-size: contain; background-color: gray;"/>

                <MudFileUpload T="IBrowserFile" OnFilesChanged="OnInputFileChanged">
                    <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Info"
                                       Class="rounded-pill ma-2"
                                       for="@context">
                                Subir Foto
                            </MudButton>
                    </ButtonTemplate>
                        <SelectedTemplate>
                            <MudButton Class="rounded-pill ma-2" ButtonType="ButtonType.Submit" Size="Size.Large"
                                       Variant="Variant.Filled" Color="Color.Error" OnClick="ClearFile">
                                Limpiar
                            </MudButton>
                            @if (photo != null)
                            {
                                <MudText>@context.Name</MudText>
                            }
                            else
                            {
                                <MudText>@SubmitPhotoLabel</MudText>
                            }
                        </SelectedTemplate>
                </MudFileUpload>
                    
            </MudCard>
        </MudItem>
        
    </MudGrid>

</MudPaper>

@code {
    private string prod_name = string.Empty;
    private string prod_desc = string.Empty;
    private string sub_cat = string.Empty;
    private string category = string.Empty;
    private IEnumerable<string> selected_tags { get; set; } = new HashSet<string>();

    private IBrowserFile? photo;
    private string photoUrl = string.Empty;
    private string photoB64 = string.Empty;

    [Parameter]
    public string Id { get; set; }
    bool IsEditMode => !string.IsNullOrEmpty(Id);
    string SubmitButtonLabel => IsEditMode ? "Editar" : "Guardar";
    string SubmitPhotoLabel => IsEditMode ? "Al no subir foto se dejará la anterior" : "Sin foto";
    string SubmitBreadCrumbLabel => IsEditMode ? "Editar producto" : "Nuevo producto";

    private List<CategoryDTO> cat_list = new List<CategoryDTO>();
    private List<SubCategoryDTO> subcat_list = new List<SubCategoryDTO>();
    private List<TagDTO> tag_list = new List<TagDTO>();

    private async Task GetSelectData()
    {
        var cat_result = await _catService.CategoryList();
        cat_list = cat_result!;

        var subcat_result = await _subcatService.SubCategoryList();
        subcat_list = subcat_result!;

        var tag_result = await _tagService.TagList();
        tag_list = tag_result!;
    }

    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Producto", href: "/productos"),
            new BreadcrumbItem(SubmitBreadCrumbLabel, href: null, disabled:true),
        };

        await GetSelectData();

        if (IsEditMode)
        {
            ProductDTO product_data = await _productService.SearchProduct(Id);
            prod_name = product_data.name;
            prod_desc = product_data.description;
            if (product_data.category != null) category = product_data.category.name;
            if (product_data.subcategory != null) sub_cat = product_data.subcategory.name;
            if (product_data.tags != null) selected_tags = product_data.tags.Select(tag => tag.name);
        }

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        photo = e.File;
        photoB64 = await ConvertToB64(photo);
        photoUrl = ConvertToUrl(photoB64);
    }

    private string ConvertToUrl(string base64)
    {
        var url = $"data:{photo?.ContentType};base64,{base64}";
        return url;
    }

    private async Task<string> ConvertToB64(IBrowserFile file)
    {
        using var stream = file.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        return Convert.ToBase64String(memoryStream.ToArray());
    }

    private async Task<ProductDTO> AddProduct()
    {
        ProductDTO new_product = new ProductDTO();

        new_product.name = prod_name;
        new_product.description = prod_desc;

        var selectedCategory = cat_list.FirstOrDefault(cat => cat.name == category);
        new_product.category = selectedCategory;

        var selectedSubCategory = subcat_list.FirstOrDefault(subcat => subcat.name == sub_cat);
        new_product.subcategory = selectedSubCategory;

        var selectedTags = tag_list
            .Where(tag => selected_tags.Contains(tag.name))
            .Select(tag => new TagDTO { tagNo = tag.tagNo, name = tag.name })
            .ToList();

        new_product.tags = selectedTags;

        var result = await _productService.CreateProduct(new_product);
        return result;
    }

    private async Task<ProductDTO> EditProduct()
    {
        ProductDTO updated_product = new ProductDTO();

        updated_product.name = prod_name;
        updated_product.description = prod_desc;

        var selectedCategory = cat_list.FirstOrDefault(cat => cat.name == category);
        updated_product.category = selectedCategory;

        var selectedSubCategory = subcat_list.FirstOrDefault(subcat => subcat.name == sub_cat);
        updated_product.subcategory = selectedSubCategory;

        var selectedTags = tag_list
            .Where(tag => selected_tags.Contains(tag.name))
            .Select(tag => new TagDTO { tagNo = tag.tagNo, name = tag.name })
            .ToList();

        updated_product.tags = selectedTags;

        var result = await _productService.EditProduct(int.Parse(Id), updated_product);
        return result;
    }

    private async Task<bool> AddPhoto(string id, string photo64)
    {
        var result = await _productService.AddPhoto(id, photo.Name, photo.ContentType, photoB64);
        return result;
    }

    private void ClearFile()
    {
        photo = null;
        photoB64 = string.Empty;
        photoUrl = string.Empty;
    }

    private void OnCancelClicked()
    {
        if (IsEditMode) _navigationManager.NavigateTo($"/productos/detalle/{Id}");
        else _navigationManager.NavigateTo("/productos");
    }

    private async Task OnSubmitClicked()
    {
        if (!IsEditMode)
        {
            var prod = await AddProduct();

            if (prod != null)
            {
                if (!string.IsNullOrEmpty(photoB64)) await AddPhoto(Convert.ToString(prod.productNo), photoB64);

                Snackbar.Add("Producto creado correctamente", Severity.Success);
                _navigationManager.NavigateTo("/productos");
            }
            else Snackbar.Add("Error al crear producto", Severity.Warning);
        }
        else
        {
            var prod = await EditProduct();

            bool photo_update = false;
            if (!string.IsNullOrEmpty(photoB64))
            {
                photo_update = await AddPhoto(Id, photoB64);
            }

            if (photo_update) Snackbar.Add("Foto actualizada correctamente", Severity.Success);

            if (prod != null)
            {
                Snackbar.Add("Producto actualizado correctamente", Severity.Success);
                _navigationManager.NavigateTo($"/productos/detalle/{Id}");
            }
            else Snackbar.Add("Error al editar producto", Severity.Error);
        }

    }
}
