@page "/clientes/agregar"
@page "/clientes/editar/{id}"
@attribute [Authorize(Policy = "CustomerWrite")]
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@layout MainLayout
@inject NavigationManager _navigationManager
@inject SharedData _data
@inject CustomerService _customerService
@inject ISnackbar Snackbar

<MudPaper Class="mx-2" Style="height:100%; overflow-y:auto; overflow-x: hidden; background-color:white;">
    <MudAppBar Elevation="0" Fixed="false" Style="border-radius:24px; position: sticky; top: 0;" Class="pa-0 ma-0" Dense="true">

        <MudText Typo="Typo.h6" Align="Align.Left" Color="Color.Dark" Margin="Margin.Dense">Formulario cliente</MudText>

        <MudSpacer />

        <MudButton Class="rounded-pill mx-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Medium"
                   Color="Color.Error" OnClick="OnCancelClicked" Style="text-transform:none">
            Cancelar
        </MudButton>

        <MudButton Class="rounded-pill mx-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Medium"
                   Color="Color.Primary" OnClick="OnSubmitClicked" Style="text-transform:none">
            @SubmitButtonLabel
        </MudButton>
    </MudAppBar>

    <MudGrid Justify="Justify.Center" Class="pa-5">
        <MudItem xs="10">
            <MudTextField @bind-Value="txtName" Label="Nombre" Variant="Variant.Outlined" Class="my-3" Margin="Margin.Dense"></MudTextField>
            <MudTextField @bind-Value="txtSurname" Label="Apellido" Variant="Variant.Outlined" Class="my-3" Margin="Margin.Dense"></MudTextField>
            <MudTextField @bind-Value="txtEmail" Label="Email" Variant="Variant.Outlined" Class="my-3" Margin="Margin.Dense"></MudTextField>
            <MudTextField T="int" @bind-Value="txtPhone" Label="Telefono" Variant="Variant.Outlined" Class="my-3" Margin="Margin.Dense"></MudTextField>
                <MudDatePicker Label="Fecha de nacimiento" Editable="true" @bind-Date="dpBirthDate" Placeholder="Selecciona Fecha"
                           Class="my-3" PickerVariant="PickerVariant.Dialog" Margin="Margin.Dense" />
            <MudSelect T="string" Label="Género" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="sGender" 
                       Class="my-3" Margin="Margin.Dense">
                    <MudSelectItem T="string" Value="@("Masculino")" />
                    <MudSelectItem T="string" Value="@("Femenino")" />
                </MudSelect>
        </MudItem>
    </MudGrid>

</MudPaper>

@code {
    private string txtName = string.Empty;
    private string txtSurname = string.Empty;
    private string txtEmail = string.Empty;
    private int txtPhone;
    private DateTime? dpBirthDate;
    private string sGender = string.Empty;

    [Parameter]
    public string Id { get; set; }
    bool IsEditMode => !string.IsNullOrEmpty(Id);
    string FormTitle => IsEditMode ? "Editar cliente" : "Agregar cliente";
    string SubmitButtonLabel => IsEditMode ? "Actualizar" : "Guardar";

    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Clientes", href: "/clientes"),
            new BreadcrumbItem(FormTitle, href: null, disabled: true)
        };

        if (IsEditMode)
        {
            CustomerDTO customer_data = new CustomerDTO();

            var result = await _customerService.SearchCustomer(Id);
            customer_data = result!;

            txtName = customer_data.name;
            txtSurname = customer_data.surname;
            txtEmail = customer_data.email ?? string.Empty;
            txtPhone = customer_data.phone ?? 0;
            if (customer_data.birthDate != null)
            dpBirthDate = new DateTime(customer_data.birthDate.Value.Year, customer_data.birthDate.Value.Month, customer_data.birthDate.Value.Day);
            sGender = (customer_data.gender == "M") ? "Masculino" : "Femenino";
        }

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

    }

    private async Task<CustomerDTO> AddCustomer()
    {
        CustomerDTO new_customer = new CustomerDTO();

        new_customer.name = txtName;
        new_customer.surname = txtSurname;
        new_customer.email = txtEmail;
        new_customer.phone = txtPhone;
        new_customer.gender = (sGender == "Masculino") ? "M" : (sGender == "Femenino") ? "F" : "";
        new_customer.birthDate = DateOnly.FromDateTime(dpBirthDate ?? DateTime.Now);

        var result = await _customerService.CreateCustomer(new_customer);
        return result;
    }

    private async Task<CustomerDTO> EditCustomer()
    {
        CustomerDTO updated_customer = new CustomerDTO();

        updated_customer.name = txtName;
        updated_customer.surname = txtSurname;
        updated_customer.email = txtEmail;
        updated_customer.phone = txtPhone;
        updated_customer.gender = (sGender == "Masculino") ? "M" : (sGender == "Femenino") ? "F" : "";
        updated_customer.birthDate = DateOnly.FromDateTime(dpBirthDate ?? DateTime.Now);

        var result = await _customerService.EditCustomer(int.Parse(Id), updated_customer);
        return result;
    }

    private void OnCancelClicked() => _navigationManager.NavigateTo("/clientes/");

    private async Task OnSubmitClicked()
    {
        if (!IsEditMode)
        {
            var customer = await AddCustomer();

            if (customer != null)
            {
                Snackbar.Add("Cliente agregado correctamente", Severity.Success);
                _navigationManager.NavigateTo("/clientes");
            }
            else Snackbar.Add("Error al agregar cliente", Severity.Error);
        }
        else
        {
            var customer = await EditCustomer();

            if (customer != null)
            {
                Snackbar.Add("Cliente actualizado correctamente", Severity.Success);
                _navigationManager.NavigateTo($"/clientes");
            }
            else Snackbar.Add("Error al actualizar cliente", Severity.Error);
        }

    }
}
