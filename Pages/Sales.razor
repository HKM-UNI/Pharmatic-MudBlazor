@page "/ventas"
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@layout MainLayout
@inject NavigationManager _navigationManager
@inject SharedData _data
@inject ProductService _productService
@inject LotService _lotService

<MudPaper>
    <MudAppBar Elevation="0" Fixed="false" Style="border-radius: 15px; position: sticky; top: 0;">

        <MudAutocomplete Placeholder="Buscar productos" @bind-Value="txtProduct" Variant="Variant.Outlined" AdornmentIcon="@CustomIcons.Search"
                         Adornment="Adornment.Start" Margin="Margin.Dense" SearchFunc="SearchProducts" T="string" ShowProgressIndicator="true"
                         ProgressIndicatorColor="@Color.Primary">

            <NoItemsTemplate>
                <MudText Typo="Typo.body1">
                    No se encontró
                </MudText>
            </NoItemsTemplate>
        </MudAutocomplete>

        <MudButton Class="rounded-pill mx-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Large"
                   Color="Color.Primary" OnClick="CheckProduct">
            Agregar
        </MudButton>


        <MudSpacer />

        <MudButton Class="rounded-pill mx-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Large"
                   Color="Color.Error">
            Limpiar productos
        </MudButton>

        <MudButton Class="rounded-pill mx-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Large"
                   Color="Color.Success" OnClick="Billing">
            Procesar
        </MudButton>

        <MudIconButton Icon="@CustomIcons.Bag" Color="Color.Primary" Size="Size.Large" Class="ml-10"/>
        <MudText Typo="Typo.h5" Color="Color.Dark">6</MudText>

    </MudAppBar>
    <MudGrid Class="pa-3" Spacing="1">

        @foreach(var p in product_cart)
        {
            <MudItem xs="11">

                <MudCard Style="background-color: #F5F5F5">
                    <MudCardHeader Class="px-3 py-0">

                        <CardHeaderAvatar>
                            <MudImage Src="@p.Key.Product?.ImageUrl"
                                      Width="150" Height="150" Elevation="25" Class="rounded-lg ma-3" />
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" Align="Align.End">stock: @p.Key.Stock</MudText>
                            <MudText Typo="Typo.h4" Inline="true">@p.Key.Product?.Name</MudText>
                            <MudText Typo="Typo.body1" Inline="true">
                                : @p.Key.Composition?.Dose?.Name @p.Key.Composition?.Roa?.Description - @p.Key.Composition?.ContentSize 
                                @p.Key.Composition?.Measure?.Unit 
                            </MudText>
                            <MudText Typo="Typo.h5">
                                <MudIcon Icon="@Icons.Material.Outlined.PersonOutline" Size="Size.Medium" /> @p.Key.Provider?.Name
                                <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Medium" /> @p.Key.ExpirationDate
                            </MudText>
                            <MudText Typo="Typo.h5" Inline="true">@p.Key.Product?.Category?.Name</MudText>
                            <MudText Typo="Typo.body1" Align="Align.End">Precio cliente: @p.Key.SellingPrice</MudText>
                        </CardHeaderContent>

                    </MudCardHeader>

                </MudCard>

            </MudItem>
            <MudItem xs="1" Style="display: flex; flex-direction: column; justify-content: center; align-items: center;">
                <MudButton Variant="Variant.Outlined" Size="Size.Large" Color="Color.Primary">+</MudButton>
                <MudText Typo="Typo.h6">@p.Value</MudText>
                <MudButton Variant="Variant.Outlined" Size="Size.Large" Color="Color.Error">-</MudButton>
            </MudItem>
        }
        
    </MudGrid>

</MudPaper>

@code {
    private string txtProduct = string.Empty;
    private List<ProductDTO> product_list = new List<ProductDTO>();
    private Dictionary<LotDTO, int> product_cart = new Dictionary<LotDTO, int>();


    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Carrito", href: null, disabled:true),
        };

        await GetProducts();
    }

    private void Billing()
    {
        _navigationManager.NavigateTo("/ventas/facturacion");
    }

    private async Task CheckProduct()
    {
        var result = await _lotService.LotList(Convert.ToString(GetProductId()));
        var lotsToAdd = new List<LotDTO>();

        foreach (var lot in result)
        {
            bool isLotAlreadyAdded = false;

            foreach (var kvp in product_cart)
            {
                if (kvp.Key.LotNo == lot.LotNo)
                {
                    isLotAlreadyAdded = true;
                    break;
                }
            }

            if (!isLotAlreadyAdded)
            {
                lotsToAdd.Add(lot);
            }
        }

        foreach (var lotToAdd in lotsToAdd)
        {
            product_cart.Add(lotToAdd, 1);
        }
    }



    private async Task GetProducts()
    {
        var result = await _productService.ProductList();
        product_list = result!;
    }

    private int GetProductId()
    {
        return product_list.Find(product => product.Name.Equals(txtProduct, StringComparison.InvariantCultureIgnoreCase)).ProductNo;
    }

    private async Task<IEnumerable<string>> SearchProducts(string value)
    {
        await Task.Delay(1000);

        if (!string.IsNullOrEmpty(value))
            return product_list
                .Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .Select(x => x.Name);
        
        else return product_list.Select(x => x.Name);
    }

}

