@page "/metadata/vias"
@using Pharmatic.DTOs;
@using Pharmatic.Services;
@layout MainLayout
@inject RouteOfAdministrationService _roaService
@inject NavigationManager _navigationManager
@inject SharedData _data


<MudPaper>
    <MudAppBar Elevation="0" Fixed="false" Style="border-radius: 15px; position: sticky; top: 0;">
        <MudTextField @bind-Value="@search_text" Placeholder="Buscar" Variant="Variant.Outlined" Adornment="Adornment.Start"
                      AdornmentIcon="@CustomIcons.Search" Margin="Margin.Dense" />

        <MudSpacer />

        <MudButton Class="rounded-pill" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Size="Size.Large"
                   Color="Color.Primary" OnClick="OpenAddDialog">
            Agregar
        </MudButton>
    </MudAppBar>
    <MudGrid Class="pa-3" Spacing="1">

    </MudGrid>

</MudPaper>

<MudDialog @bind-IsVisible="add_visible">
    <TitleContent>
        <MudText Typo="Typo.h4">
            Creación de vía de administración
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="roa_txt" Label="Vía de administración" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="AddSubmit" Class="px-10">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddSubmit" Class="px-10">Crear</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="edit_visible">
    <TitleContent>
        <MudText Typo="Typo.h4">
            Edición de vía de administración
        </MudText>
        <MudText Typo="Typo.body1">
            Nombre actual de vía de administración: @current_roa
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="roa_txt" Label="Nuevo nombre" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="EditSubmit" Class="px-10">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="EditSubmit" Class="px-10">Crear</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="delete_visible">
    <TitleContent>
        <MudText Typo="Typo.h4">
            Desea eliminar @current_roa?
        </MudText>
        <MudText Typo="Typo.body1">
            Estas completamente seguro, tambien eliminaras los registros que dependen de esta información.
        </MudText>
    </TitleContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="DeleteSubmit" Class="px-10">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteSubmit" Class="px-10">Eliminar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string search_text = string.Empty;
    private List<RouteOfAdmDTO> roa_list = new List<RouteOfAdmDTO>();

    private bool add_visible;
    private void OpenAddDialog() => add_visible = true;
    void AddSubmit() => add_visible = false;

    private bool edit_visible;
    private void OpenEditDialog(string n)
    {
        edit_visible = true;
        current_roa = n;
    }
    void EditSubmit() => edit_visible = false;

    private bool delete_visible;
    private void OpenDeleteDialog(string n)
    {
        delete_visible = true;
        current_roa = n;
    }
    void DeleteSubmit() => delete_visible = false;

    private string roa_txt;
    private string current_roa;

    protected override async Task OnInitializedAsync()
    {
        _data.Items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Metadata", href: "/metadata"),
            new BreadcrumbItem("Vías de administración", href: null, disabled: true)
        };
        await GetROAs();
    }

    private void Devolver()
    {
        _navigationManager.NavigateTo("/metadata");
    }

    private async Task GetROAs()
    {
        var result = await _roaService.RoutesOfAdmList();
        roa_list = (List<RouteOfAdmDTO>)result!;
    }
}
